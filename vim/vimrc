"# wtf-file-vimrc
"## Vimproved
"wtf-vimproved

set nocompatible

"## Buffer
"wtf-buffer

set hidden

set encoding=utf-8

set autoread
autocmd FocusGained,BufEnter * :silent!<space>!

"## Aparência e som
"wtf-aparencia

colorscheme slate
set background=dark
set t_Co=256
set termguicolors
set noerrorbells novisualbell t_vb=
set belloff=all
set conceallevel=2

set t_ut=""
if (&term =~ '^xterm' && &t_Co == 256)
   set t_ut= | set ttyscroll=1
endif

"## Comportamento
"wtf-comportamento

syntax on

filetype plugin indent on
set showmatch                   
set showmode                    
set showcmd                     
set autoindent                  
set mouse=                      
set linebreak                   
set nocursorcolumn nocursorline 
set number norelativenumber     
set nrformats-=octal            
set lazyredraw                  
set nobackup                    
set noswapfile                  
set scrolloff=3                 
set clipboard^=unnamedplus,unnamed
set colorcolumn=
set backspace=indent,eol,start
set formatoptions+=jcr
set hlsearch   
set incsearch  
set ignorecase 
set nosmartcase
set noemoji
set renderoptions=
set modeline
set modelines=5
set tabstop=4
set softtabstop=4
set shiftwidth=4
set smarttab
set expandtab
set foldmethod=marker
set foldtext=FoldTextMarker()
set fillchars=vert:\|,fold:─

let g:html_dynamic_folds=1
let g:html_prevent_copy = "fntd"

function! FoldTextMarker()
    let lines_count = v:foldend - v:foldstart + 1

    " :h digraph-table-mbyte
    let lines_count_text = '┤' . printf("%4s", lines_count) . '├'
    let foldchar = matchstr(&fillchars, 'fold:\zs.')

    " remove marcação de comentários # // /* <!--
    let titulo = substitute(getline(v:foldstart), "^[#*{\/ \"<!--]*", "", 'g')

    " remove marcação de comentários */
    let titulo = substitute(titulo, "\*\/*$", "", 'g')
    " remove marcação de comentários -->
    let titulo = substitute(titulo, "\-\-\>*$", "", 'g')
    " remove espaços que sobraram ao final da linha
    let titulo = substitute(titulo, "\ *$", "", 'g')

    " cria + de acordo com foldlevel
    let foldtextstart = repeat('+', v:foldlevel) . ' ' . titulo

    let foldtextend = lines_count_text . repeat(foldchar, 8)
    let foldtextlength = strlen(substitute(foldtextstart . foldtextend, '.', 'x', 'g')) + &foldcolumn
    return foldtextstart  . ' ' . repeat(foldchar, winwidth(0)-foldtextlength) . foldtextend
endfunction

let g:netrw_liststyle=3
let g:netrw_bufsettings = 'noma nomod nu nobl nowrap ro'
set shellslash

"### Autocomplete
"wtf-autocomplete

set wildmenu
set shortmess+=c
set wildcharm=<tab>
set completeopt=menuone,noinsert,noselect

set wildignore=.git,.git/**
set wildignore+=.svn,.svn/**
set wildignore+=node_modules,node_modules/**
set wildignore+=.venv,*/*_cache/*
set wildignore+=dist,dist/**
set wildignore+=target,target/**
set wildignore+=build,build/**
set wildignore+=vendor,vendor/**
set wildignore+=ios,ios/**
set wildignore+=android,android/**
set wildignore+=_site,_site/**
set wildignore+=*/coverage,*/coverage/**
set wildignore+=*/_reports,*/_reports/**
set wildignore+=DS_Store,DS_Store/**
set wildignore+=tags
set wildignore+=.next

set wildignorecase

set complete=.,k,w

set tags=tags

set iskeyword+=-

set omnifunc=syntaxcomplete#Complete

"## Statusline
"wtf-statusline

set laststatus=2
set statusline=
set statusline+=\ %f\ %r\%m
set statusline+=\%=
set statusline+=\ %p%%\ %l:\%c
set statusline+=\ %y

"## Funções
"wtf-funcoes

function! NN_ctags()
    let s:ctags_command="ctags" . 
                \ " -R --totals" .
                \ " --kinds-python=-i" .
                \ " --extras=+f" .
                \ " --exclude=.git --exclude=.svn" .
                \ " --exclude=vendor --exclude=_*" .
                \ " --exclude=*_cache" .
                \ " --exclude=node_modules --exclude=dist --exclude=build --exclude=ios --exclude=android" .
                \ " --exclude=_site" .
                \ " --languages=php,javascript,python"

    " procura se existe um arquivo .ctags a mais
    if filereadable(expand(".ctags"))
        let s:ctags_command.=" --options=.ctags"
    endif

    " seta pasta atual como alvo do ctags
    let s:ctags_command.=" ."

    " executa o comando montado na string
    execute "!".s:ctags_command
endfun

function! NN_EmojiToggle()
    if &renderoptions == ""
        set renderoptions=type:directx,gamma:1.0,contrast:0.1,level:1.0,geom:1,renmode:5,taamode:1
    else
        set renderoptions=
    endif
endfun

function! NN_SetGitDir()
    " Change working dir to the current file
    cd %:p:h
    " Set 'gitdir' to be the folder containing .git
    let gitdir=system("git rev-parse --show-toplevel")
    " See if the command output starts with 'fatal' (if it does, not in a git repo)
    let isnotgitdir=matchstr(gitdir, '^fatal:.*')
    " If it empty, there was no error. Let's cd
    if empty(isnotgitdir)
        cd `=gitdir`
    endif
endfunction

function! NN_Lexplorer()
    call NN_SetGitDir()
    Lexplore
endfunction

function! NN_Tasks()
    call NN_SetGitDir()
    vimgrep /\C\<TODO\>\|\C\<FIXME\>/j **
    copen
endfunction

function! NN_GitAula()
    let log = system("git log --pretty=format:\%s")
    vnew
    put=log
    normal! gg
    if search('^:tv: add aula')>0
        normal! 3W
        let s:numero_aula = expand('<cword>')+1
        echom system("git add -A && git commit -m \":tv: add aula ".s:numero_aula."\"")
    else
        echom system("git add -A && git commit -m \":tv: add aula 1\"")
    endif
    bdelete!
endfunction

function! NN_GitAula2()
    let log = system("git log --pretty=format:\%s")
    vnew
    put=log
    normal! gg
    if search('^:zap: add aula')>0
        normal! 3W
        let s:numero_aula = expand('<cword>')+1
        echom system("git add -A && git commit -m \":zap: add aula ".s:numero_aula."\"")
    else
        echom system("git add -A && git commit -m \":zap: add aula 1\"")
    endif
    bdelete!
endfunction

function! s:FechaSplitOuDeletaBuffer()
    if winnr('$') > 1
        q
    else
        bd
    endif
endfunction

function! s:FechaSplitOuDeletaBufferForced()
    if winnr('$') > 1
        q!
    else
        bd!
    endif
endfunction

"## Comandos

command! Sov w | source $MYVIMRC | e %

command! -nargs=* Cake make! <args> | cw
command! -nargs=* Lake make! <args> | cw

command! BufOnly execute 'kb|%bdelete|e #|b#|bd%|normal `b'

command! TerminalGitRootVertical exec 'call NN_SetGitDir() | vert term ++kill=term'
command! TerminalGitRootHorizontal exec 'call NN_SetGitDir() | term ++kill=term'

command! Syntax echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<' . synIDattr(synID(line("."),col("."),0),"name") . "> lo<" . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"

"## Mapeamentos
":map -> lista todos mapeamentos para o arquivo

" TODO ver funcionamento do localleader (:h maplocalleader)
let mapleader="\<space>"

nnoremap    <leader><leader>    :w<CR>
nnoremap    <leader><cr>        :call NN_Lexplorer()<cr>
nnoremap    <leader>/           :noh<cr>
nnoremap    <leader>.           :pwd<CR>
nnoremap    <leader>dd          :call <SID>FechaSplitOuDeletaBuffer()<CR>
nnoremap    <leader>df          :call <SID>FechaSplitOuDeletaBufferForced()<CR>
nnoremap    <leader>ds          :on<CR>| " Close all splits
nnoremap    <leader>j           <c-w>w|" estilo DWM
nnoremap    <leader>k           <c-w>W|" estilo DWM
nnoremap    <leader>n           :call NN_<c-d>| " funções pessoais
vnoremap    <leader>n           :call NN_<c-d>| " funções pessoais
nnoremap    <expr><leader>q     empty(filter(getwininfo(), 'v:val.quickfix')) ? ":cope<CR>" : ":ccl<CR>"
nnoremap    <expr><leader>l     empty(filter(getwininfo(), 'v:val.loclist')) ? ":lope<CR>" : ":lcl<CR>"
nnoremap    <leader>s           :split<CR>
nnoremap    <leader>t           :tj <c-r><c-w><CR>| " Goto definition (ctags)
nnoremap    <leader>v           :vsplit<CR>
nnoremap    <leader>y           my^vg_"+y:echo "Copiado!!"<CR>
vnoremap    <leader>y           "+y:echo "Copiado!!"<CR>
nnoremap    <leader>z           za

nnoremap    !!          :!!<CR>
nnoremap    #           :b #<CR>|" FIXME volta para unlisted buffer tbm
vnoremap    <           <gv|" mantêm select após indentação
vnoremap    >           >gv|" mantêm select após indentação
inoremap    "           ""<left>|"autoclose
inoremap    '           ''<left>|"autoclose
inoremap    {           {}<left>|"autoclose
inoremap    {}          {}|"evitar {}}
inoremap    {<CR>       {}<left><CR><Esc>O|"autoclose
inoremap    {<space>    {}<left><space><space><left>|"autoclose
inoremap    (           ()<left>|"autoclose
inoremap    ()          ()|"evitar ())
inoremap    (<CR>       ()<left><CR><Esc>O|"autoclose
inoremap    (<space>    ()<left><space><space><left>|"autoclose
inoremap    [           []<left>|"autoclose
inoremap    []          []|"evitar []]
inoremap    [<CR>       []<left><CR><Esc>O|"autoclose
inoremap    [<space>    []<left><space><space><left>|"autoclose
vnoremap    J           :m '>+1<CR>gv=gv| " move seleção pra baixo
vnoremap    K           :m '<-2<CR>gv=gv| " move seleção pra cima
inoremap    kj          <esc>|" esc mais fácil
nnoremap    n           nzzzv|" centraliza match do search
nnoremap    N           Nzzzv|" centraliza match do search
vnoremap    o'          c'<c-r>"'|" surround match
vnoremap    o"          c"<c-r>""|" surround match
vnoremap    o(          c(<c-r>")|" surround match
vnoremap    o{          c{<c-r>"}|" surround match
vnoremap    o[          c[<c-r>"]|" surround match
nnoremap    Q           @q
tnoremap    <esc>       <C-\><C-n>
noremap     \           za|" toggle fold
nnoremap    <expr><f2>  &foldlevel ? 'zM' :'zR'| " Toggle fold todo arquivo
noremap     <up>        <nop>|" força hjkl
noremap     <down>      <nop>|" força hjkl
noremap     <left>      <nop>|" força hjkl
noremap     <right>     <nop>|" força hjkl
inoremap    <up>        <nop>|" força hjkl
inoremap    <down>      <nop>|" força hjkl
inoremap    <left>      <nop>|" força hjkl
inoremap    <right>     <nop>|" força hjkl
nnoremap    <c-\>       <c-]>|" teclado brasileiro <c-]> não funciona
inoremap    <c-a>       <C-O>yiW<End>=<C-R>=<C-R>0<CR>| " tip 73 (vim.fandom)
inoremap    <c-h>       <left>|" força hjkl
cnoremap    <c-h>       <left>
inoremap    <c-j>       <down>|" força hjkl
nnoremap    <c-j>       <c-w>w|" estilo DWM
inoremap    <c-k>       <up>|" força hjkl
nnoremap    <c-k>       <c-w>W|" estilo DWM
cnoremap    <c-l>       <right>
inoremap    <c-l>       <right>|" força hjkl
tnoremap    <c-l>       cls<cr>
nnoremap    <c-n>       yiwV| " substitue mult cursors
xnoremap    <c-n>       :s/<c-r><c-*>//g<left><left>| " substitue mult cursors
inoremap    <c-q>       <esc>:call JumpToTag()<cr>| " <++>
nnoremap    <c-q>       :call JumpToTag()<cr>| " <++>
nnoremap    <c-s>       mi<esc>gg=G`i|" indenta todo o arquivo
nnoremap    <c-z>       u|" remove comportamento <c-z>
tnoremap    <s-insert>  <c-w>"*
tnoremap    <c-s-v>     <c-w>"*

"## Abreviações
"wtf-abbr

cnoreabbrev W! w!
cnoreabbrev Q! q!
cnoreabbrev Qa! qa!
cnoreabbrev QA! qa!
cnoreabbrev Wq wq
cnoreabbrev Wa wa
cnoreabbrev wQ wq
cnoreabbrev WQ wq
cnoreabbrev W w
cnoreabbrev Q q
cnoreabbrev Qa qa
cnoreabbrev QA qa
cnoreabbrev Wqa wqa
cnoreabbrev WQa wqa
cnoreabbrev WQA wqa
cnoreabbrev wQA wqa
cnoreabbrev wqA wqa
cnoreabbrev wQa wqa

cabbrev cvimgrep
            \ noautocmd vim /\<lt><C-R><C-W>\>/g
            \ **/*<C-R>=(expand("%:e")=="" ? "" : ".".expand("%:e"))<CR>
            \ <Bar> cope
            \ <C-Left><C-Left><C-Left>

cabbrev clvimgrep
            \ noautocmd lvim /\<lt><C-R><C-W>\>/g
            \ <C-R>=(expand("%"))<CR>
            \ <Bar> lop
            \ <C-Left><C-Left><C-Left>

"## AutoCmds
"wtf-autocmd

" FIXME Como colocar definição de filetype em ftdetect?
augroup filetype_detect
    au!
    au BufRead,BufNewFile *.phtml setfiletype html
    au BufRead,BufNewFile *.gv setfiletype dot
augroup END

"## Packs pessoais
"wtf-packs-pessoais

"### DankDebug

let g:print_debug_pattern = {
            \   'go':               '^\s*fmt.Println(\p*)',
            \   'python':           '^\s*print(\p*)',
            \   'php':              '^\s*var_dump(\p*);die;',
            \   'javascript':       '^\s*console.log(\p*)',
            \   'typescript':       '^\s*console.log(\p*)',
            \   'typescriptreact':  '^\s*console.log(\p*)',
            \ }

command! DankDebug exe "noautocmd vimgrep /".g:print_debug_pattern[&filetype]."/g ".expand("%") | cope

"### Diagrama ascii

function! Boxdraw()
    set virtualedit=all

    " Cancela virtual edit
    "set virtualedit=

    let row0 = line("'<") - 1
    let col0 = virtcol("'<") - 1
    let row1 = line("'>") + 1
    let col1 = virtcol("'>") + 1
    
    " FIXME criando quadrado de cima o baixo esquerda para direita ok,
    " restante não. Pq?
    " echo row0 . "-" . col0 . "-" . row1 . "-" . col1

    let quantidadeL = col1 - col0
    call cursor(row1, col0)
    exec "normal! v".quantidadeL."lr-"
    call cursor(row0, col0)
    exec "normal! v".quantidadeL."lr-"

    let quantidadeJ = row1 - row0
    call cursor(row0, col0)
    exec "normal! \<c-v>".quantidadeJ."jr|"
    call cursor(row0, col1)
    exec "normal! \<c-v>".quantidadeJ."jr|"

    call cursor(row0, col0)
    normal! r+
    call cursor(row1, col0)
    normal! r+
    call cursor(row0, col1)
    normal! r+
    call cursor(row1, col1)
    normal! r+
endfunction

function! Connectordraw()
    " coordenadas que iniciaram ou terminaram a seleção
    let row0 = line("'<")
    let col0 = virtcol("'<")
    let row1 = line("'>")
    let col1 = virtcol("'>")

    let rowI = 0
    let colI = 0

    call cursor(row0, col0)
    let conteudoPosicaoInicial = getline('.')[col('.')-1]
    if(conteudoPosicaoInicial == '-' || conteudoPosicaoInicial == '|')
        let rowI = line('.')
        let colI = virtcol('.')
    endif
    call cursor(row1, col1)
    let conteudoPosicaoInicial = getline('.')[col('.')-1]
    if(conteudoPosicaoInicial == '-' || conteudoPosicaoInicial == '|')
        let rowI = line('.')
        let colI = virtcol('.')
    endif

    " cancela seta
    if(rowI == 0)
        return
    endif

    " TESTES: https://codepen.io/nenitf/pen/xxVwYmL?editors=0010

    let rowF = rowI == row0 ? row1 : row0
    let colF = colI == col0 ? col1 : col0

    let rowM = col0 == col1 ? rowI : rowF
    let colM = row0 == row1 ? colI : colF

    let primeiraReta = 0
    let segundaReta = 0

    call cursor(rowI, colI)
    let conteudoPosicaoInicial = getline('.')[col('.')-1]
    if(conteudoPosicaoInicial == '-')
        let primeiraReta = '|'
        let segundaReta = '-'
        let colM = colI
    else
        let primeiraReta = '-'
        let segundaReta = '|'
        let rowM = rowI
    endif

    if(rowI > rowM)
        let quantidadeJ = rowI - rowM
        call cursor(rowM, colM)
        exec "normal! \<c-v>".quantidadeJ."jr|"
    elseif(rowI < rowM)
        let quantidadeJ = rowM - rowI
        call cursor(rowI, colI)
        exec "normal! \<c-v>".quantidadeJ."jr|"
    elseif(colI > colM)
        call cursor(rowM, colM)
        let quantidadeL = colI - colM
        exec "normal! v".quantidadeL."lr-"
    elseif(colI < colM)
        call cursor(rowI, colI)
        let quantidadeL = colM - colI
        exec "normal! v".quantidadeL."lr-"
    endif

    if(rowM > rowF)
        let arrowHead = '^'
        let quantidadeJ = rowM - rowF
        call cursor(rowF, colF)
        exec "normal! \<c-v>".quantidadeJ."jr|"
    elseif(rowM < rowF)
        let arrowHead = 'v'
        let quantidadeJ = rowF - rowM
        call cursor(rowM, colM)
        exec "normal! \<c-v>".quantidadeJ."jr|"
    elseif(colM > colF)
        let arrowHead = '<'
        let quantidadeL = colM - colF
        call cursor(rowF, colF)
        exec "normal! v".quantidadeL."lr-"
    elseif(colM < colF)
        let arrowHead = '>'
        let quantidadeL = colF - colM
        call cursor(rowM, colM)
        exec "normal! v".quantidadeL."lr-"
    endif

    call cursor(rowI, colI)
    normal! r+
    call cursor(rowM, colM)
    normal! r+
    call cursor(rowF, colF)
    exec "normal! r".arrowHead
endfunction

vnoremap + :<c-u>call Boxdraw()<CR>
vnoremap - :<c-u>call Connectordraw()<CR>

"### Execute file and OutputAssertion

let s:executaveisPorExtensao = {
            \ 'lua': 'lua',
            \ 'php': 'php',
            \ 'go': 'go run',
            \ 'py': 'python3',
            \ 'js': 'node'
            \}

function! s:OutputAssertion()
    try
        let command = s:executaveisPorExtensao[expand('%:e')]
    catch
        echo "Extensão não mapeada"
        return
    endtry

    execute "tabnew | 0r!".command." #"

    if(v:shell_error > 0)
        q!
        echo "Executável não encontrado"
        return
    endif

    " faz o vim entender que não queremo salvar esse arquivo
    setlocal buftype=nofile
    normal! Gdd
    nnoremap <buffer> q :windo bd!<CR>
    new

    " deixar em cima a mensagem
    " caso tenha: set splitbelow
    " é o ideal
    " wincmd r
    normal! iUse "q" para fechar todos os buffers

    " faz o vim entender que não queremo salvar esse arquivo
    setlocal buftype=nofile
    wincmd w

    " resize o máximo
    wincmd _

    vert diffsplit outputassertion.txt
    nnoremap <buffer> q :windo bd!<CR>
    wincmd l
endfunction

let g:current_filetype=""
let g:current_terminal=0

function! s:ExecuteCurrentBufferFile()
    if g:current_terminal
        " ocorre erro caso o buffer não exista mais
        try
            execute "bd! ".g:current_terminal
        catch
        endtry
    endif
    try
        let command = s:executaveisPorExtensao[expand('%:e')]
    catch
        echo "Extensão não mapeada"
        return
    endtry
    cclose

    let g:current_filetype=&filetype
        new
        execute "set filetype=".g:current_filetype
        set buftype=terminal
        execute "silent 0r!".command." #"
        let g:current_terminal = bufnr()
        silent cgetbuffer
        execute "b ".g:current_terminal
        set filetype=txt
        cw
endfunction

command! OutputAssertion :call <SID>OutputAssertion()
command! DumpScript :call <SID>ExecuteCurrentBufferFile()
nnoremap <leader>r :DumpScript<CR>

"### RunCmd

function! RunCmd(line)
    silent! noautocmd botright pedit RUNCMD
    silent! noautocmd botright pedit RUNCMD
    noautocmd wincmd P
    set buftype=nofile
    exe "noautocmd r! ".a:line
    noautocmd wincmd p
endfunction

command! -nargs=1 RunCmd :call RunCmd(<q-args>)

"### PostegreSQL

function! s:PsqlComplete(A, L, P) abort
    let commands = [ 
                \ "SELECT ",
                \ "SELECT * ",
                \ "TOP ",
                \ "FROM ",
                \ "WHERE ",
                \ "LIMIT ",
                \]
    return filter(commands, 'v:val =~ "^" . a:A')
endfunction

command! -nargs=+ -complete=customlist,s:PsqlComplete Psql exe 'RunCmd psql -w --dbname postgresql://'.g:dbs_psql[g:db_psql]["url"].' -c "'.<q-args>.'"'
command! -nargs=1 -complete=customlist,g:PsqlCompleteTable PsqlSelectAllFrom exe 'Psql select * from '.<q-args>
command! PsqlSelectAllTables Psql SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' ORDER BY table_name

"### Comentário

let s:comment_map = { 
            \   "c": '\/\/',
            \   "cpp": '\/\/',
            \   "dot": '\/\/',
            \   "go": '\/\/',
            \   "java": '\/\/',
            \   "javascript": '\/\/',
            \   "javascriptreact": '\/\/',
            \   "typescript": '\/\/',
            \   "typescriptreact": '\/\/',
            \   "vue": '\/\/',
            \   "lua": '--',
            \   "scala": '\/\/',
            \   "php": '\/\/',
            \   "python": '#',
            \   "ruby": '#',
            \   "rust": '\/\/',
            \   "scss": '\/\/',
            \   "sass": '\/\/',
            \   "sh": '#',
            \   "bashrc": '#',
            \   "vim": '"',
            \ }

function! ToggleComment()
    if has_key(s:comment_map, &filetype)
        let comment_leader = s:comment_map[&filetype]
        if getline('.') =~ "^\\s*" . comment_leader . " " 
            " Uncomment the line
            execute "silent s/^\\(\\s*\\)" . comment_leader . " /\\1/"
        else 
            if getline('.') =~ "^\\s*" . comment_leader
                " Uncomment the line
                execute "silent s/^\\(\\s*\\)" . comment_leader . "/\\1/"
            else
                " Comment the line
                execute "silent s/^\\(\\s*\\)/\\1" . comment_leader . " /"
                " execute "silent s/^/\\1" . comment_leader . " /"
            end
        end
    end
endfunction

nnoremap gc :call ToggleComment()<cr>
vnoremap gc :call ToggleComment()<cr>

"### Snippets

let g:nonkw_snippet_trigger = "\<tab>"

function! TestaTriggerSnippet(abbr, expansion, placeholders)
    let g:placeholders = a:placeholders
    let s:expansion = a:expansion.
                \ "\<Esc>:call PlaceHolder('?')\<CR>"
            " \ "\<Esc>g_"
            " \ "\<C-R>=Eatchar('\s')\<CR>"
    let c = nr2char(getchar(0))
    if c == g:nonkw_snippet_trigger
        return s:expansion
    else
        return a:abbr . c
    endif
endfunction

inoremap <c-j> <ESC>:call PlaceHolder('/')<CR>
snoremap <c-j> <ESC>:call PlaceHolder('/')<CR>
snoremap <bs>  i<bs>

" TODO tornar stateless
let g:placeholders = []
function! PlaceHolder(backward)
    if get(g:placeholders, 0, '0') != '0'
        if search(g:placeholders[0], 'nw')>0
            let placeholder = g:placeholders[0]
            unlet g:placeholders[0]

            if get(g:placeholders, 0, '0') != '0'
                highlight link NeniSnippetPlaceHolder DiffAdd
                execute 'match NeniSnippetPlaceHolder /'.g:placeholders[0].'/'
            else
                execute "match NeniSnippetPlaceHolder //"
            endif

            execute "normal! ".a:backward.placeholder."\<cr>"
            execute "normal! gn\<c-g>"
        else
            execute "normal! a".g:placeholders
        endif
    endif
endfunction

" FIXME só funciona após :Sov
inorea <buffer><expr> filen TestaTriggerSnippet('filen',
            \ "<C-R>=expand('%:t:r')<CR>",
            \ [])

"### Listas

function! AutoCompleteCarinhas()
    call complete(col('.'), [
                \ 'ಥ_ಥ',
                \ 'ლ(ಠ益ಠლ)',
                \ 'ಠ╭╮ಠ',
                \ '(╯°□°)╯︵ ʞooqǝɔɐɟ',
                \ '(╯°□°)╯︵ ┻━┻',
                \ '(╮°-°)╮┳━┳',
                \ '( ͡° ͜ʖ ͡°)',
                \ '¯\_(ツ)_/¯',
                \ '(~˘▾˘)~',
                \ 'ᕦ(ò_óˇ)ᕤ',
                \ '༼ つ ◕_◕ ༽つ',
                \])
    return ''
endfunction
inoremap <c-z> <c-r>=AutoCompleteCarinhas()<CR>
