*wtf* *nenitf* *neniwtf* *neniwtfvim* *neniwtfvimrc*
Neni @nenitf <http://neni.dev>
>
                    +----------------+
          +-------->|manutenibilidade+-------+
          |         +----------------+       |
          |                                  v
    +-----+------+                      +---------+
    |simplicidade|                      |qualidade|
    +-----+------+                      +---------+
          |                                  ^
          |            +-----------+         |
          +----------->|performance+---------+
                       +-----------+
<

|MANTER|:
  - Compatibilidade entre: vim e nvim; Windows e Linux
  - Código organizado (arquivo e fold correto)
  - Teclas default
  - Menos plugins possível
  - Configurações antigas, novas e defaults documentadas com observações

|DOWNLOAD|: Para baixar somente a configuração básica copie o conteúdo de `vimrc` e `gvimrc`:

Windows:
>
  curl https://raw.githubusercontent.com/nenitf/dotfiles/main/vim/vimrc > %userprofile%\_vimrc
  curl https://raw.githubusercontent.com/nenitf/dotfiles/main/vim/gvimrc > %userprofile%\_gvimrc
<

Linux:
>
  wget https://raw.githubusercontent.com/nenitf/dotfiles/main/vim/vimrc -O $HOME/.vimrc
  wget https://raw.githubusercontent.com/nenitf/dotfiles/main/vim/gvimrc -O $HOME/.gvimrc
<

|DICAS|:
  - Nos folds:
      - `zR` e `zM` abre e fecha recursivamente todo arquivo (map: `<f2>`)
      - `za` abre e fecha (toggle) um folder (map: `<tab>`)
      - `[z` `]z` equivalem a `gg` `G` de um fold aberto
      - `zj` `zk` pulo de fold
  - Propriedades que são setadas podem voltar ao seu valor inicial com &,
  por exemplo `set wildmenu&`
  - `:map` lista todos mapeamentos para o arquivo
  - Comandos para testar performance:
      - `:syntime` on e `:syntime` report
      - abrir vim no terminal com `vim --startuptime tempo.txt tempo.txt`
      - abrir vim no terminal com `vim -u NONE` ou `vim --clean` (remove vimrc)

|COMPLEMENTO|:
  - Melhore as buscas com `:GrepperAgP` instalando https://github.com/ggreer/the_silver_searcher

==============================================================================
*wtf-usage*

- Usar `K` (`:h K`) em cima da palavra da configuração para consultar manual
- Duas formas de atualizar helptags:
    - `:helptags ~/dev/dotfiles/vim/doc`
    - `:helptags vim/doc dentro de dotfiles`

------------------------------------------------------------------------------
MANUTENÇÃO NENIWTFVIM

- Separar seções com `=` e subseções com `-`
- Usar ` para códigos inline e > < com identação para blocos
- Usar * para tags e | para realces
- Caso não dê para ver o conceal basta slecionar o texto
- Evitar utilizar ponto final
- Configurações antigas colocar `|[GOLD]|`
- Scripts ou referências com links devem ser colocadas com `|THANKS|: <url>`
- Formatar largura dos comentários com `Vgq`

==============================================================================
*wtf-files*

- `~/.vimrc`
- `~/_vimrc`
- `~/.gvimrc`
- `~/_gvimrc`
- `~/.vimrc-pre.vim`
- `~/.gvimrc-pre.vim`
- `dotfiles/vim/gvimrc`
- `dotfiles/vim/vimrc`
- `dotfiles/vim/dotfiles.vim`
- `dotfiles/vim/packages.vim`
- `dotfiles/vim/plus.vim`
- `~/.gvimrc-local.vim`
- `~/.vimrc-local.vim`
- `dotfiles/vim/syntax/*`
- `dotfiles/vim/ftplugin/*`
- `dotfiles/vim/ftdetect/*`

------------------------------------------------------------------------------
*wtf-file-vimrcpre*

Arquivo de definições de variáveis e configurações da máquina.
Deve ser criado na home com o nome `.vimrc-pre.vim`.

Exemplo:
>
  set pythonthreehome=~/AppData/Local/Programs/Python/Python38-32
  set pythonthreedll=~/AppData/Local/Programs/Python/Python38-32/python38.dll
<
------------------------------------------------------------------------------
*wtf-file-vimrc*

Arquivo de configurações básicas do vim, podendo ser adicionado de maneira
independente do repo dotfiles.

#1:

Referenciar ele online
>
  vim -c "Ns https://raw.githubusercontent.com/nenitf/dotfiles/main/vim/vimrc"
<

#2:

Salvar o arquivo e referenciar ele
>
  vim -u <path/to/vimrc>
<

#3:

Baixar arquivo e deixá-lo em:
  - `%userprofile%\_vimrc` no Windows
  - `$HOME/.vimrc` no Linux.

------------------------------------------------------------------------------
*wtf-file-gvimrc*

Arquivo de configurações que é referenciado se o gvim for aberto

Corrige efeitos visuais e sonoros
Note: When the GUI starts, 't_vb' is reset to its default value, you might
want to set it again in your gvimrc.
|THANKS|: https://stackoverflow.com/a/18589653
|THANKS|: http://vimdoc.sourceforge.net/htmldoc/gui_w32.html
>
  au! GUIEnter * set visualbell t_vb=

  " Complemento do Windows ¯\_(ツ)_/¯
  au! GUIEnter * simalt ~x
<

Remove componentes da interface
>
  set guioptions-=T  " tool bar
  set guioptions-=m  " menu bar
  set guioptions-=r  " scroll bar direita
  set guioptions-=L  " scroll bar esquerda (janela com split vertical)
<

Aumento e diminuição da fonte
|THANKS|: https://vi.stackexchange.com/a/3104/28875
>
  function! FontSizePlus ()
  function! FontSizeMinus ()

  nnoremap <c-kPlus> :call FontSizePlus()<CR>
  nnoremap <c-kMinus> :call FontSizeMinus()<CR>
<
------------------------------------------------------------------------------
*wtf-file-dotfiles*

Configurações que dependem da estrutura de diretórios de nenitf/dotfiles como:
  - Esqueletos de arquivos
    |THANKS|: https://shapeshed.com/vim-templates
  - Dicionários
    |THANKS|: https://github.com/skywind3000/vim-dict
    Note para organizar alfabeticamente, selecione as linhas e :sort

Carrega arquivo caso exista
|THANKS|: https://devel.tech/snippets/n/vIIMz8vZ/load-vim-source-files-only-if-they-exist/
>
  function! SourceIfExists(file)
<
------------------------------------------------------------------------------
*wtf-file-packages*

Arquivo de configurações de plugins/packages. Seu desacoplamento do vimrc
serve para permitir o uso do vim em seu estado mais básico de configurações
sem a necessidade de baixar outros arquivos.

ctrlpvim/ctrlp.vim

|PROS|:
  - Search de buffer advinhando conforme é digitado
  - Search de file advinhando conforme é digitado
  - Search de mru advinhando conforme é digitado
  - Search de tag advinhando conforme é digitado
  - Se adequa ao repositorio git
  - Abre facilmente vertical e horizontal split
  - Criação de arquivos e pastas rapidamente
|CONS|:
  - Não funciona as vezes. TODO ver o motivo
  - Pode ser meio lento
  - Pode existir solução solução própria do vim
    https://www.reddit.com/r/vim/comments/7iy03o/you_aint_gonna_need_it_your_replacement_for/dr2qo4k?utm_source=share&utm_medium=web2x
    https://www.vi-improved.org/recommendations/

|USOS|:
  - Escolher arquivo <c-p> pesquisar/escolher arquivo <enter>
  - Criar arquivos e o path: <c-p> digitar arquivo ou /path/arquivo a ser criado <c-y><enter>
  - Escolher arquivo em split: <c-p> pesquisar/escolher arquivo <c-h>
  - Escolher arquivo em vsplit: <c-p> pesquisar/escolher arquivo <c-v>

Note
  - É possível usar tab para completar nomes de pastas

---------------------------------------
|[GOLD]| junegunn/fzf.vim

|[GOLD]| Usar `:GFiles` produz erro do bash
>
  nnoremap <silent> <leader>f :call fzf#run({'source': 'git ls-files', 'sink': 'e', 'down': '40%'})<CR>
<

Fecha split ao cancelar pesquisa
|THANKS|: https://github.com/junegunn/fzf.vim/issues/544#issuecomment-457456166
>
  tnoremap <expr> <Esc> (&filetype == "fzf") ? "<Esc>" : "<c-\><c-n>"
<
---------------------------------------
unblevable/quick-scope

|PROS|:
  - Facilita com o f

|USOS|:
  - `:QuickScopeToggle`

Deve vir antes da definição final do colorscheme
>
  augroup qs_colors
      autocmd!
      autocmd ColorScheme * highlight QuickScopePrimary guifg='#afff5f' gui=underline ctermfg=155 cterm=underline
      autocmd ColorScheme * highlight QuickScopeSecondary guifg='#5fffff' gui=underline ctermfg=81 cterm=underline
  augroup END
<

Trigger a highlight in the appropriate direction when pressing these keys:
>
  let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']
<
---------------------------------------
mhinz/vim-startify

|PROS|:
  - Gerenciamento de sessões
  - Comandos na tela inicial

|USOS|:
  - `:SLoad` load a session
  - `:SSave[!]` save a session
  - `:SDelete[!]` delete a session
  - `:SClose` close a session

---------------------------------------
plasticboy/vim-markdown

|PROS|:
  - Conceal de * ** *** ` `` ```ft
  - Tem a navegação com `:Toc`

Desabilita folds (fica estranho com jekyll)
>
  let g:vim_markdown_folding_disabled = 1
<

Cabeçalho do documento, usado no jekyll
>
  let g:vim_markdown_frontmatter = 1
<
---------------------------------------
tpope/vim-fugitive

|PROS|:
  - add, commit e status rápido
  - comparare stage rápido
  - git blame

Maps de `:Gstatus`, `:G` e `<f3>` (`:h fugitive-maps` ou `g?`)
|THANKS|: http://vimcasts.org/blog/2011/05/the-fugitive-series/
  - Navegação:
      - `]]` `[[` navega entre commits e arquivos
      - `)`, `(`, `<c-n>` e `<c-p>` navega entre commits, arquivos e hunks
      - `<cr>` abre arquivo
  - Stage:
     - `U` unstage all
     - `X` descarta alterações
     - - toggle stage unstage arquivo ou hunk
  - Diff:
      - `=` toggle diff inline
      - `dv` vertical diff split
          - usar `:diffget` (stage) `:diffput` (unstage) na index (fugitive)
          - salvar e sair com `ZZ`
  - Conflitos:
      - TODO
  - Commits:
      - `cc` abre janeja de mensagem de commit
      - `ca` add staged ao ultimo commit e abre janela mensagem de commit
      - `ce` add staged ao ultimo commit sem editá-lo
      - `cvc` commita com detalhes diffs que não vão (ver commit -v)
      Note Fechar commit com `ZZ` ao invez de `:wq`
  - Stash:
      - TODO

Commit rápido do arquivo atual + stageds se houver
>
  command! GC :Gw | Gcommit
<
---------------------------------------
airblade/vim-gitgutter

|PROS|:
  - Marcação de + ~ _
|CONS|:
  - Perf
  - Dispara sozinho com :lvim

|USOS|:
  - `<leader>hp` mostra valor anterior do hunk
  - `<leader>hs` stage["git add line"] modificação, removendo chunk
  - `<leader>hu` desfaz modificação não staged no chunk

Atualização mais rápida
>
  set updatetime=100
<

Desabilita por padrão, para habilitar basta usar`:GitGutterEnable`
>
  let g:gitgutter_enabled=0
<

Desabilita maps do gitgutter
>
  let g:gitgutter_map_keys=0
<
---------------------------------------
junegunn/goyo.vim

|PROS|:
  - Leitura mais confortável da wiki
  - Idel para apresentações com markdown + folds

Presentation mode
|THANKS|: https://gist.github.com/davidmh/f4337f9ea9eca6789b3f8222b8333a35
>
  function! s:enter_presentation()
  function! s:exit_presentation()
  autocmd! User GoyoEnter nested call <SID>enter_presentation()
  autocmd! User GoyoLeave nested call <SID>exit_presentation()
<
---------------------------------------
pangloss/vim-javascript

|PROS|:
  - Syntax js

---------------------------------------
Quramy/tsuquyomi

|PROS|:
  - Rápido
  - Vimscript (out of box)
  - Quickfix dos erros e autocomplete do omnifunc
|CONS|:
  - Mesmo inativando maps `<esc><esc>` é igual a `<c-t>`

---------------------------------------
MaxMEllon/vim-jsx-pretty

|PROS|:
  - Syntax jsx
  - indentação jsx

---------------------------------------
dense-analysis/ale

|PROS|:
  - Auto format com eslint E prettier
  - Mensagem de erro e aviso
  - Marcação do texto e código do erro
|CONS|:
  - Afeta perf

Note
  - `:ALEFix` caso não formate por algum motivo
    - ou usar cli:
      - `:!prettier --write %`
      - `:!yarn eslint --fix %`

Set de linters
>
  let g:ale_fixers = {
              \ 'javascript': ['prettier', 'eslint'],
              \ 'javascriptreact': ['prettier', 'eslint'],
              \ 'typescript': ['prettier', 'eslint'],
              \ 'typescriptreact': ['prettier', 'eslint']
              \ }
<

Força correção de acordo com o lint ao salvar o arquivo
>
  let g:ale_fix_on_save = 1
<

|[GOLD]|
Ale na statusline
>
  function! LinterStatus() abort
      let l:counts = ale#statusline#Count(bufnr(''))
      let l:all_errors = l:counts.error + l:counts.style_error
      let l:all_non_errors = l:counts.total - l:all_errors
      return l:counts.total == 0 ? 'OK' : printf(
                  \   '%dW %dE',
                  \   all_non_errors,
                  \   all_errors
                  \)

  let g:ale_echo_msg_error_str = 'E'
  let g:ale_echo_msg_warning_str = 'W'
  let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
<
---------------------------------------
|[GOLD]| joshdick/onedark.vim

|PROS|:
  - Cores agradáveis
  - Baixo contraste (melhor para leitura)
  - Suporte a todas linguagens que utilizo
  - Tema popular (constantes atualizações)
|CONS|:
  - Não possui light theme
  - Possivelmente a quantidade de cores afeta perf

Note afterglow outro tema interessante
  https://github.com/danilo-augusto/vim-afterglow

Configura colorscheme
|THANKS|: https://github.com/joshdick/onedark.vim/issues/110#issuecomment-345599864
>
  packadd! onedark.vim
  colorscheme onedark
<
---------------------------------------
|[GOLD]| andreasvc/vim-256noir
|PROS|:
  - Cores agradáveis
  - Não distrai com multiplas cores em tela
|CONS|:
  - Não possui light theme
  - Cores de diff de adição ou remoção não são intuitivas
  - Tema não popular, atualização baixa

Configura colorscheme
>
  colorscheme 256_noir
<
---------------------------------------
|[GOLD]| ewilazarus/preto
|PROS|:
  - Cores agradáveis
  - Não distrai com multiplas cores em tela
|CONS|:
  - Contraste alto
  - Conceal estranho
  - Não possui light theme
  - Cursor preto se perde no editor
  - Tema não popular, atualização baixa

---------------------------------------
pgdouyon/vim-yin-yang

|PROS|:
  - Cores agradáveis
  - Baixo contraste (melhor para leitura)
  - Não distrai com multiplas cores em tela
|CONS|:
  - Tema não popular, atualização baixa
  - SpellBad com contraste estranho
  - Search com contraste estranho
  - MatchParen com contraste estranho
  - LineNr com background desnecessário

Corrige grupos de cores específicos
>
  function! FixColorschemeYin()
  augroup override_highlights_yin
      autocmd!
      autocmd ColorScheme yin call FixColorschemeYin()
  augroup END
  call FixColorschemeYin()
<
---------------------------------------
editorconfig/editorconfig-vim

|PROS|:
  - Integração com editorconfig

Exemplo de `.editorconfig`:
>
  root = true

  [*]
  indent_style = space
  indent_size = 2
  charset = utf-8
  trim_trailing_whitespace = true
  insert_final_newline = true
<

Note `insert_final_newline` funciona porém não aparece no vim!
THANKS: https://github.com/editorconfig/editorconfig/wiki/Newline-at-End-of-File-Support#vim

---------------------------------------
junegunn/gv.vim

|PROS|:
  - Mais facil de pesquisar pelo titulo do commit
  - Clicar no commit permite ver sua descrição e diff
---------------------------------------
phpactor/phpactor

Autocomplete e utilitários para PHP.

Note: Para instalá-lo baixe o composer e as dependencias do projeto do `pack`

Note: `:PhpactorStatus` utiliza como `--working-dir` o local onde o terminal
foi aberto e não o `:pwd`. Contudo, mesmo com o `--working-dir` errado, não
ocorre nenhum problema, somente falha no teste de git + composer

- Atualiza <c-x><c-o> de `phpcomplete#CompletePHP` para o plugin
>
  au! FileType php setlocal omnifunc=phpactor#Complete
<

Sugestões de configuração:
>
  augroup PhpactorMappings
      au!
      au FileType php setlocal omnifunc=phpactor#Complete
      au FileType php nmap <buffer> <Leader>u :PhpactorImportClass<CR>
      au FileType php nmap <buffer> <Leader>e :PhpactorClassExpand<CR>
      au FileType php nmap <buffer> <Leader>ua :PhpactorImportMissingClasses<CR>
      au FileType php nmap <buffer> <Leader>mm :PhpactorContextMenu<CR>
      au FileType php nmap <buffer> <Leader>nn :PhpactorNavigate<CR>
      au FileType php nmap <buffer> <Leader>o :PhpactorGotoDefinition edit<CR>
      au FileType php nmap <buffer> <Leader>K :PhpactorHover<CR>
      au FileType php nmap <buffer> <Leader>tt :PhpactorTransform<CR>
      au FileType php nmap <buffer> <Leader>cc :PhpactorClassNew<CR>
      au FileType php nmap <buffer> <Leader>ci :PhpactorClassInflect<CR>
      au FileType php nmap <buffer> <Leader>r :PhpactorFindReferences<CR>
      au FileType php nmap <buffer> <Leader>mf :PhpactorMoveFile<CR>
      au FileType php nmap <buffer> <Leader>cf :PhpactorCopyFile<CR>
      au FileType php nmap <buffer> <silent> <Leader>ee :PhpactorExtractExpression<CR>
      au FileType php vmap <buffer> <silent> <Leader>ee :<C-u>PhpactorExtractExpression<CR>
      au FileType php vmap <buffer> <silent> <Leader>em :<C-u>PhpactorExtractMethod<CR>
  augroup END
<
---------------------------------------
natebosch/vim-lsc

Configuração de LSP

Configura as linguagens
>
  let g:lsc_server_commands = {'dart': 'dart_language_server'}
<

Permite maps sugeridos pelo plugin
>
  let g:lsc_auto_map = {'defaults': v:true}

  <C-]>                   |:LSClientGoToDefinition|
  <C-W>], <C-W><C-]>      |:LSClientGoToDefinitionSplit|
  gr                      |:LSClientFindReferences|
  <C-n>                   |:LSClientNextReference|
  <C-p>                   |:LSClientPreviousReference|
  gI                      |:LSClientFindImplementations|
  go                      |:LSClientDocumentSymbol|
  gS                      |:LSClientWorkspaceSymbol|
  ga                      |:LSClientFindCodeActions|
  gR                      |:LSClientRename|
  gm                      |:LSClientSignatureHelp|
  |K| (via |keywordprg|)      |:LSClientShowHover|
<

Não permite modificação em `completeopt` pois é importante demais no vimrc 
>
  let g:lsc_auto_completeopt = v:false
<

Não tenta adivinhar complete sem <c-x><c-o>
Note: Aparentemente sempre precisar enviar algum caracter para o LS, portanto
para pegar metodos/propriedades é preciso utilizar o gatilho antes do
operador. Ex: Color<c-x><c-o>. (e então aparecem as sugestões de Color).
>
  let g:lsc_autocomplete_length = 0
<

Utiliza preview-window ao inves de popup
TODO como dar scroll em popup?
>
  let g:lsc_hover_popup = v:false
<
---------------------------------------
natebosch/vim-lsc-dart

Configuração de LSP do Dart/Flutter com:
- Autocomplete
- Syntax dinâmica de erro

TODO Corrigir autocomplete para sugerir sempre com <c-x><c-o>, e não
<c-x><c-o> + alguma letra

TODO Ver o quanto afeta performance e como diminuir

Note: Caso tenha sido baixado com snap `sudo snap install snapcraft --classic`
precisa referenciar o SDK corretamente
|THANKS|: https://github.com/natebosch/vim-lsc-dart/issues/11#issuecomment-1094143540
>
  let g:lsc_dart_sdk_path = '~/snap/flutter/common/flutter/bin/cache/dart-sdk/'
<
---------------------------------------
diepm/vim-rest-console

|PROS|:
  - Falicita MUITO programar apis REST
  - "Documenta" as requisições da api

|USOS|:
  - `]]` `[[` navega entre blocos de requisição
  - usar `<c-j>` no bloco da requisição

Assume que o filetype de retorno é json
Note Somente quando não é indicado nas opções de curl `-i`
>
  let g:vrc_response_default_content_type = 'application/json'
<

Troca `<c-j>` por `<c-x>` pois já mapeei para splits
>
  let g:vrc_trigger = '<C-x>'
<

Exemplo de `vrc.rest`

>
  # global definitions
  // default host
  http://localhost:3333

  // argumentos curl default
  -s # silencioso
  #-i # header com syntax dinamica
  --

  --
  POST /appointments
  {
    "provider": "Felipe",
    "date": "2020-05-07T20:34:03"
  }
  --
  GET /appointments
<
---------------------------------------
|[GOLD]| vim-vdebug/vdebug

|PROS|:
  - Unico debug pra vim
  - Suporte para multiplas linguagens
|CONS|:
  - Necessita de Python3
  - Não funcionou com phpunit

XDEBUG:
  - Acessar: https://xdebug.org/wizard
  - Baixar `dll` ou `so` indicado e salvar em `/path/to/php/ext` ou
  `/path/to/php/ext/ext`
  - Adicionar no php.ini
>
    [xdebug]
    zend_extension="/path/to/php/ext/xdebug.so" (.so ou .dll)
    xdebug.remote_enable=on
    xdebug.remote_handler=dbgp
    xdebug.remote_host=localhost
    xdebug.remote_port=9000
<

|USOS|:
   `<F5>`: inicia/vai para o proximo breakpoint
   `<F2>`: avança um passo
   `<F3>/<F4>`: entra/sai um passo
   `<F6>`: para debug (kills script)
   `<F6><F6>`: para o debug e fecha a interface do VDebug
   `<F9>`: avança até o cursor
   `<F10>`: toggle breakpoint
   `<F11>`: mostra variáveis de contexto
   `<F12>`: mostra variável abaixo do cursor
   `:Breakpoint <type> <args>`: set a breakpoint of any type (see `:help VdebugBreakpoints`)
   `:VdebugEval "<code>"`: evaluate some code and display the result

Evita erro:
`DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses`
|THANKS|: https://github.com/powerline/powerline/issues/1925#issuecomment-402635097
>
  if has('python3')
    silent! python3 1
    packadd! vdebug
  endif
<
Note Necessário configurar:
  - `set pythonthreehome=~/AppData/Local/Programs/Python/Python38-32`
  - `set pythonthreedll=~/AppData/Local/Programs/Python/Python38-32/python38.dll`


Note Script proposto para criar a sessão do xdebug
>
  #!/bin/bash
  export XDEBUG_CONFIG="idekey=xdebug"
  php "$@"
<
------------------------------------------------------------------------------
*wtf-file-plus*

Arquivo de configurações com ou sem plugins/packages que afetam a performance
do vimrc base.
------------------------------------------------------------------------------
*wtf-file-vimrclocal*

Arquivo de configurações de packages ou novos sources.
Deve ser criado na home com o nome `.vimrc-local.vim`.

Exemplo:
>
  " Configurações que afetam a perf, mistura vim builtin e plugins, exemplo:
  call SourceIfExists(g:dotfiles_dir."/vim/plus.vim")

  let g:startify_lists = [
              \ { 'type': 'sessions', 'header': ['sessões'] },
              \ { 'type': 'commands', 'header': ['comandos'] },
              \ ]

  let g:startify_commands = [
              \ { 'g': ['gostack11', 'e ~/dev/gostack11']},
              \ ]

  " set rtp+=~/scoop/apps/fzf
  " set rtp+=~/.fzf/plugin
  set rtp+=~/.fzf

  function! SourceIfProjectx()
      if(getcwd() == "/home/neni/dev/projectx")
          augroup filetype_projectx
              autocmd!
              autocmd FileType typescript,javascript setlocal tabstop=4 softtabstop=4 shiftwidth=4
          augroup END
      endif
  endfunction

  au DirChanged * :call SourceIfProjectx()
<
------------------------------------------------------------------------------
*wtf-file-gvimrclocal*

Arquivo de configurações de packages ou novos sources.
Deve ser criado na home com o nome `.gvimrc-local.vim`.
Note `set guifont=*` para ver opções de fontes

Exemplo:
>
    set guifont=Fira\ Code:h10
    " set guifont=DejaVu\ Sans\ Mono\ 10
    " set guifont=UbuntuMono\ NF:h11
    " set guifont=Consolas:h11
>
------------------------------------------------------------------------------
*wtf-file-exrc*

Carregamento de `vimrc` existente no work dir (`:h :pwd` e `:h 'getcwd()'`).
Ideal para setar wildignore para remover pesquisa de paths de libs

Exemplo de arquivo:
>
  set wildignore+=tests/_reports/*
  let g:ctrlp_custom_ignore.dir .= '\|_reports'
  nnoremap !! :!composer test<CR>

  let g:nn_compiler_with_docker_compose = 1
  compiler pytest
<

|[GOLD]|
Note `exrc` puro não resolve o problema pois ele só carrega o `.vimrc`,
`.exrc` `_vimrc` ou `_exrc` no momento que o vim é aberto no diretório. Por
isso o startify não da o gatilho, mas é uma opção interessante caso seja usado
somente no terminal. Abaixo a configuração padrão de `exrc` (`:h exrc`)
|THANKS|: https://superuser.com/a/532673
>
  set exrc
  set secure
<
==============================================================================
*wtf-vimproved*

Definições de compatibilidades

- Quebra compatibilidade com vi
- Evita erros bizarros como de interpretação de dicionários e etc
>
  set nocompatible
<
------------------------------------------------------------------------------
*wtf-buffer*

Configurações sobre conteúdo/exibição pura do buffer

Buffers vs Tabs (polêmica ᕦ(ò_óˇ)ᕤ)
  - o mesmo arquivo não é aberto duas vezes
  - mais velocidade pois a janela não precisa ser redesenhada

>
  set hidden
<
Note `:ls lista`, `:b <numero><tab>` acessa buffers

|[GOLD]|
O vim escolhe automaticamente `ff` e `ffs` de acordo com o sistema
operacional.

Checa/atualiza se o texto foi modificado (ocorre mt com o git)
>
  set autoread
  autocmd FocusGained,BufEnter * :silent!<space>!
  " au FocusGained,BufEnter * checktime
<
------------------------------------------------------------------------------
*wtf-aparencia*

Colorscheme default, sobescrito com plugins

>
  colorscheme slate
<

Ajusta cores para um fundo escuro
>
  set background=dark
<

Força uso de 256 cores, permitindo highlight hexadecimal, com guibg e guifg
ao invés de somente ctermbg e ctermfg
>
  set t_Co=256
  set termguicolors
<

Remove som ao apertar multiplos ESCs
|THANKS|: https://vim.fandom.com/wiki/Disable_beeping"
>
  set noerrorbells novisualbell t_vb=
  set belloff=all
<

Habilita conceal
>
  set conceallevel=2
<


Limpa tela do terminal para exibir corretamente o vim
|THANKS|: https://github.com/microsoft/terminal/issues/832#issuecomment-493747616

>
  set t_ut=""
<
------------------------------------------------------------------------------
*wtf-comportamento*

Syntax de acordo com o filetype
>
  syntax enable     " por algum motivo a syntax some com o tempo
  syntax on         " não some com o tempo
<

Carrega ftplugin.vim e indent.vim do runtimepath (plugins)
Note Deve vir depois das definições de runtimepaths
>
  filetype plugin indent on
<

Exibe fechamento de {[()]}
>
  set showmatch                   
<

Exibe mode no canto inferior esquerdo
>
  set showmode                    
<

Exibe os comandos no canto inferior direito
>
  set showcmd                     
<

Auto indentação
>
  set autoindent                  
<

Restringe uso do mouse em todos modos ("a" libera)
>
  set mouse=                      
<

Quebra a linha por palavra e não por letra
>
  set linebreak                   
<

Não marca colunha e linha do cursor (perf)
>
  set nocursorcolumn nocursorline 
<

Exibe régua sem numero relativo (perf)
>
  set number norelativenumber     
<

<c-a> e <c-x>
>
  set nrformats-=octal            
<

Não redesenha a tela durante macro (perf)
>
  set lazyredraw                  
<

Não cria arquivo de bkp
>
  set nobackup                    
<

Não cria arquivo swap (?)
>
  set noswapfile                  
<

Mantêm 3 linhas acima/abaixo do cursor em scroll
>
  set scrolloff=3                 
<

Utiliza clipboard do linux e windows para copiar e colar (y e p)
>
  set clipboard^=unnamedplus,unnamed
<

Não limita a coluna (textwidth ou colorcolumn) por padrão pois afeta
performance, mas para modelines o ideal é 80 para impressão (`:ha`).
>
  set colorcolumn=
  " set textwidth=80
  " set colorcolumn=81
<

Permite usar <bs> mesmo indo contra auto-intent, eol e inicio da linha
|THANKS|: https://vi.stackexchange.com/a/2163/28875
>
  set backspace=indent,eol,start
<

Opções de auto inserção de blocos. Alguns filetypes já possuem por default
diferentes configurações, portanto é mais interessante add ou remover (+= e
-=). Abaixo os valores possíveis (`:h fo-table`)
  t     quebra automatica do texto de acordo com textwidth
        ideal colocar na modeline: tw=80 fo+=t
  c     quebra automática do texto de comentários
  r     insere marcação de comentário (:set comments?) quando usado <cr> no
        insert a partir de um comentário
  o     insere marcação de comentário ao criar nova linha com 'o' no normal
  q     permite formatação com Vgq (depende do textwidth)
  w     TODO
  a     TODO
  n     add automaticamente 2) 3) 4) ...
  v     TODO
  b     TODO
  l     não quebra linhas que ao entrar no insert ja passaram o textwidth
  m     TODO
  M     TODO
  B     TODO
  1     TODO
  j     ao juntar linhas de comentários com 'J' remove o caracter de
        comentário intermediário
  p     TODO

>
  set formatoptions+=jcr
<

Colore os matches de search (`* / %s`)
>
  set hlsearch
<

Colore a pesquisa durante a digitação
>
  set incsearch
<

Ignora case sensitive na busca
>
  set ignorecase
<

Case sensitive se a primeira letra for maiuscula,
Note Ruim para autocomplete de nomes de funções
>
  set nosmartcase
<


Desabilita renderização de emojis pela performance
>
  set noemoji
  set renderoptions=

  " Emojis coloridos
  "if has("directx")
  "    set renderoptions=type:directx,gamma:1.0,contrast:0.1,level:1.0,geom:1,renmode:5,taamode:1
  "    set emoji
  "endif
<


Habilita modeline nas 5 primeiras/ultimas linhas para configuração individual
de arquivos
A linha pode ser comentada de acordo com a syntaxe do filetype do arquivo
Note Exemplos de modeline:
  - `vim: set fdm=marker:`
  - `vim: set fo+=t tw=80:`
  - `vim: set sw=3 ts=3 cc=85 cuc:`
>
  set modeline
  set modelines=5
<

Configuração tabs e espaços
|THANKS|: https://stackoverflow.com/a/1878983/9881278
>
  set tabstop=4
  set softtabstop=4
  set shiftwidth=4
  set smarttab
  set expandtab
<

Configura símbolos do vim (`:h digraph-table-mbyte`)
>
  set fillchars=vert:\|,fold:─
<

Retorna título dos folds sem comentários padrões de linguagens
|THANKS|: https://stackoverflow.com/a/5984138/9881278
|THANKS|: https://jdhao.github.io/2019/08/16/nvim_config_folding/
|THANKS|: https://dhruvasagar.com/2013/03/28/vim-better-foldtext
>
  function! FoldTextMarker()
<

Netrw no lugar do nerdtree, usar `:Lexplore` para toggle
  - :edit a folder to open a file browser
  - <CR>/v/t to open in an h-split/v-split/tab
  - check |netrw-browse-maps| for more mappings

TODO Como não criar NetrwTreeListing (???) e .netrwhist? (???)
https://github.com/tpope/vim-vinegar/issues/13
>
  "autocmd FileType netrw setlocal bufhidden=delete
<

Tree view
>
  let g:netrw_liststyle=3
<

Exibe numeros (ruler)
|THANKS|: https://stackoverflow.com/a/8731175
>
  let g:netrw_bufsettings = 'noma nomod nu nobl nowrap ro'
<

Usa como separador de diretório `/` ao invés de `\`, padrão do Windows
Note Util para importar modulos no javascript
>
  set shellslash
  " set nossl cancela
<
------------------------------------------------------------------------------
*wtf-autocomplete*

Habilita menu
>
  set wildmenu
>

Remove mensagens inúteis do wildmenu
>
  set shortmess+=c
<

Char para chamar wildmenu de um map
|THANKS|: https://vi.stackexchange.com/a/5030/28875
>
  set wildcharm=<tab>
<

Mostra menu de opções
  - menuone: menu com uma ou mais de uma sugestão
  - noinsert: não insere texto selecionado automaticamente
  - noselect: não seleciona o texto automaticamente
>
  set completeopt=menuone,noinsert,noselect
<

Remove das sugestões arquivos/diretorios (lvimgrep tb)
|THANKS|: https://stackoverflow.com/a/20042050/9881278
>
  set wildignore=node_modules/*
<

Origem das palavras do wildmenu (`:h ins-completion`)
  . buffer corrente
  b buffers escondidos
  k dicionários
  w de outras janelas (splits)
  t de tags (ctags)
Note Sugestão de tags afeta perf
Note <c-e> mantem o insert mode e fecha completeopt
>
  set complete=.,k,w,t
<

Informa aquivo de tags
Note Equivale a `set tags=tags,./tags`
>
  set tags=tags
<

Escolhe palavras do omnifunc de acordo com o filetype do buffer aberto
|THANKS|: https://github.com/vim-scripts/SyntaxComplete
Note <c-x><c-o> para utilizar a sugestão
>
  set omnifunc=syntaxcomplete#Complete 
<
------------------------------------------------------------------------------
*wtf-statusline*

Escolha de informações, cujo pode ser modificada em outros arquivos

Habilita e reseta statusline
>
  set laststatus=2
  set statusline=
<

  %f - nome abreviado
  %r - readonly
  %m - modificado [+]
  %= - espaço
  %p - percentual percorrido do arquivo
  %l - linhas atual
  %c - coluna atual
  %y - [filetype]
  %n - {numero do buffer}

------------------------------------------------------------------------------
*wtf-funcoes*

Funções tanto publicas, privadas quando usadas em maps e comandos

Att ctags
Note Necessario instalar universal ctags
Note Crie um `.ctags` no :pwd com parametros adicionais do ctags
>
  function! NN_ctags()
<
>
  --exclude=migrations
  --exclude=storage
  --extras=+f
  --php-kinds=c
  --languages=php
<

Habilita e desabilita emojis, ideal para perf
>
  function! NN_EmojiToggle()
<

Atualiza diretório atual (`:pwd`) com dir raiz do `.git` caso exista
|THANKS|: https://michaelheap.com/set-parent-git-directory-to-current-path-in-vim/
>
  function! NN_SetGitDir()
<

Abre :Lexplorer com pwd como do git
|THANKS|: https://michaelheap.com/set-parent-git-directory-to-current-path-in-vim/
>
  function! NN_Lexplorer()
<

Lista TODOS e FIXMES
|THANKS|: https://www.commandlinefu.com/commands/view/12833/get-a-list-of-all-todofixme-tasks-left-to-be-done-in-your-project
Note Irá ignorar path do wildignore https://stackoverflow.com/a/20042050
(possuindo /**)
Note Uma opção de pesquisa é com git `silent !git grep -EIn "TODO|FIXME"`
>
  function! NN_Tasks()
<

Commita projetos de aulas com o padrão `:tv: add aula <numero>`
>
  function! NN_GitAula()
<

Commita projetos de aulas com outro padrão `:zap: add aula <numero>`
Note Usado quando é uma cópia literal da aula, portanto é util commitar
diretamente pelo terminal com `vim README.md -c "call NN_GitAula2()" -c qa!`
>
  function! NN_GitAula()
<

|GOLD| Pesquisa palavra em todo o projeto
|THANKS|
  - https://stackoverflow.com/a/20934608/9881278
  - https://github.com/jmharvey/vim/blob/master/vimrc#L207
  - https://vimrcfu.com/snippet/104
Note Duas outras opções de pesquisa são
  - `exec "silent !git grep -EIn \"" . grepword . "\""`
  - `exec "vimgrep /".s:kwd."/ %"`
Note Melhor utiliza package `vim-grepper`


Fecha split ou deleta o buffer
>
  function! s:FechaSplitOuDeletaBuffer()
<

Fecha split ou deleta o buffer ignorando modificações
>
  function! s:FechaSplitOuDeletaBufferForced()
<

Comenta linha de acordo com filetype
|THANKS|: https://stackoverflow.com/a/24046914
>
  function! s:ToggleComment()
<
------------------------------------------------------------------------------
*wtf-comandos*

Recarrega vimrc com trigger para o filetype
|THANKS|: https://vi.stackexchange.com/a/9339/28875
>
  command! Sov source $MYVIMRC | e %
<

Fecha (sem forçar) todos buffers e deixar somente um
|THANKS|: https://salferrarello.com/vim-close-all-buffers-except-the-current-one/
>
  command! BufOnly execute 'kb|%bdelete|e #|b#|bd%|normal `b'
<

Abre terminal em split, ideal para o gvim
|THANKS|: https://stackoverflow.com/a/38082196
>
  command! TerminalGitRootVertical exec 'call NN_SetGitDir() | vert term ++kill=term'
  command! TerminalGitRootHorizontal exec 'call NN_SetGitDir() | term ++kill=term'
<

Visualiza highlight group da palavra sob o cursor
|THANKS|: https://vim.fandom.com/wiki/Identify_the_syntax_highlighting_group_used_at_the_cursor
>
  command! Syntax echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<' . synIDattr(synID(line("."),col("."),0),"name") . "> lo<" . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"
<
Note `:highlight` mostra as cores do grupo
Note `:so $VIMRUNTIME/syntax/hitest.vim` Visualiza todos highlight-groups
------------------------------------------------------------------------------
*wtf-abbr*

Simplifica lvim, listando resultados da palavra sob o cursor
|THANKS|: https://vim.fandom.com/wiki/Find_in_files_within_Vim
>
  cabbrev lvim
              \ noautocmd lvim /\<lt><C-R><C-W>\>/gj
              \ **<C-R>=(expand("%:e")=="" ? "" : ".".expand("%:e"))<CR>
              \ <Bar> lw
              \ <C-Left><C-Left><C-Left>
<
Note `lvimgrep /\[ \]/ % | lw`

------------------------------------------------------------------------------
*wtf-rtp*

Carregamento de docs, configurações e scripts, podendo ser:
  - helptags
  - scripts de syntax, ftplugin e ftdetect

É usado tanto para plugins quanto para arquivos específicos desse projeto,
vale ressaltar que caso o diretório não seja encontrado não ocorre erro,
portanto não tem problema criar acoplamento desse arquivo com outros
|THANKS|: https://medium.com/usevim/vim-101-runtimepath-83194d411b0a

- Deve vir antes das definições de filetype
- Carrega ftdetect, syntax e ftplugin, para extensões de tipos de arquivos
>
  execute "set runtimepath+=".g:dotfiles_dir."/vim"
<

O vim utilizado pelo git para commitar no Windows é diferente do que fica
instalado no sistema. Portanto o mesmo não procura em ~/vimfiles/pack/ os
packages (plugins), mas sim em ~/.vim (padrão Linux).
Como solução basta adicionar manualmente. Aparentemente não tem problema em
escolher duas vezes o mesmo diretório (caso seja aberto o gvim ao invés de
commitar por exemplo).
Pode setar packpath ao invés do runtimepath como solução
|THANKS|: https://superuser.com/a/1466466
>
  "set runtimepath+=~/vimfiles/pack/*/start/*
  set packpath+=~/vimfiles
<

Corretor ortográfico, ideal para os filetypes: text, gitcommit e markdown
|COMANDOS|:
   ]s — ir para a próxima palavra errada;
   [s — voltar para a palavra errada anterior;
   zg — adicionar a palavra sob o cursor ao dicionário;
   zug — desfazer a adição;
   z= — ver sugestões de correção para esta palavra;

Configura língua da checagem
Note BR em capslock gera o aviso `Warning region not supported`
>
  set spelllang=pt_br
<

Local onde está o dicionário
|THANKS|: https://github.com/vim/vim/issues/1330
|THANKS|: https://extensions.openoffice.org/en/project/vero-brazilian-portuguese-spellchecking-dictionary-hyphenator
|THANKS|: https://github.com/vim/vim/files/655099/pt_BR.diff.zip
|THANKS|: https://github.com/mateusbraga/vim-spell-pt-br
|THANKS|: https://ndvo.wordpress.com/2013/06/05/corretor-ortografico-nativo-do-vim/
|THANKS|: https://www.dicas-l.com.br/arquivo/verificacao_ortografica_com_o_editor_vim.php
|THANKS|: https://www.vivaolinux.com.br/artigo/Corretor-Ortografico-no-Vim-Guia-definitivo

Caso tenha interesse em versionar a adição de palavras
>
  execute "set runtimepath+=".g:dotfiles_dir."/vim/spell"
<

Arquivo que possui as adições do dicionário
|THANKS|: https://stackoverflow.com/a/27979576/9881278
>
  execute "set spellfile=".g:dotfiles_dir."/vim/spell/pt.utf-8.add"
<

------------------------------------------------------------------------------
*wtf-autocmd*

Comandos automáticos executados por eventos
|THANKS|: https://vi.stackexchange.com/a/9459/28875

|[GOLD]|
Muda tempo de gatilho
>
  augroup tempos
    autocmd InsertEnter * set timeoutlen=700
    autocmd InsertLeave * set timeoutlen=1000
  augroup END
<

|THANKS|: https://www.reddit.com/r/vim/wiki/where_to_put_filetype_specific_stuff
>
  augroup filetype_detect
      au!
      au BufRead,BufNewFile *.extensão setfiletype html
      au BufRead,BufNewFile nomeArquivo setfiletype js
  augroup END
<
------------------------------------------------------------------------------
*wtf-sources*

Sources de arquivos adicionais
Note `:scriptnames` para ver a orderm e quais scripts foram iniciados

Ordem:

- `~/.vimrc` ou `~/_vimrc` (gerado pelo `install.sh`)
  - `~/.gvimrc` ou `~/_gvimrc` (gerado pelo `install.sh`)
- `~/vimrc-pre.vim`
- `dotfiles/vim/dotfiles.vim`
- `dotfiles/vim/vimrc`
  - `dotfiles/vim/gvimrc`
- `dotfiles/vim/packages.vim`
- `~/.vimrc-local.vim`
  - Esse arquivo pode carregar `dotfiles/vim/plus.vim`
- `projeto/.exrc`

==============================================================================
vim:tw=78:sw=2:ts=2:ft=help:
